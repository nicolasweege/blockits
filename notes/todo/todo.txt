player_state          = free_state;
xscale                = 1;
yscale                = 1;
h_speed               = 0;
v_speed               = 0;
jump_pressed          = 0;
coyote_can_jump       = 0;
jump_buffer_counter   = 0;
can_jumper_dash_timer = 0;

# GMLive
if (live_call()) return live_result;

${project_name}.exe

//
// @OBS: / @Obs:
// @TODO:
// @TODO @Incomplete:
// @TODO @Complete:
//

- obj_capsule sairam fora, a rm_playground precisa ser revisada e redesenhada em algumas partes.

- rm_jungle precisa ser redesenhada inteiramente, tomando como base a rm_jungle atual.
- rm_library precisa ser redesenhada inteiramente, tomando como base a rm_library atual.
- ainda deixar o obj_capsule e seus ojetos complementares na rm_debug_1, pra testar porque esse objeto ainda pode ser util como um objeto de gameplay, onde o player controla e segue apenas o eixo x, e o y pode ser usado pra passar por lugares, e fazer alterações no mundo que possibilitem o player avançar, acho que pode ter algo interessante ai:
- comentar a linha 335 do create do obj_capsule: obj_player.y = (y + (sprite_get_height(PLAYER_COLLISION_MASK_SPRITE) / 2));
- rm_bonus_1 e rm_bonus_2 precisam ser redesenhadas também, gosto de algumas das ideias que aparecem nelas, mas nao acho que justifica uma area bonus pra cada uma delas.
- preciso terminar a rm_destroy_block_bonus, acho que jah tenho material o suficiente pra isso.
- rm_laser_beam_bonus / rm_wall_dash_collider_bonus essas ainda precisa de mais ideias, mas acho que jah da pra comecar a fazer algo.
- rm_maze_bonus essa vai ficar de lado por enquanto, nao tenho uma ideia realmente boa pra sustentar isso por enquanto.


    - definir que se as fontes não forem carregadas do /data, o jogo vai usar outra fonte padrão que 
    já exista no sistema. Como a Cascadia Code, por exemplo. (isso já ta funcionando, com excecao de todos 
    os idiomas que nao usam o alfabeto comum ocidental.
    
    - melhorar screen shake (fazer funcionar de forma fixa todas as vezes (como já é), e tremer na 
    direção certa).
    https://developer.amazon.com/docs/gamemaker/screen-shake.html

# PAUSE MENU
    - fazer com que a opção de sair do jogo fique selecionada ao clicar pela primeira vez, e se o usuario 
    clicar novamente dai vai realmente sair do jogo.

# PLAYER
    - melhorar efeito de dash

# RM_JUNGLE
    - foreground tiles
    - backgroud tiles
    - foreground props
    - background props
    - mudar toda a arte dessa area pra ser mais ludica e abstrada

# RM_LIBRARY
    - foreground tiles
    - backgroud tiles
    - foreground props
    - background props
    - foreground / background particles - limitar melhor onde serao spawnadas
    - mudar toda a arte dessa area pra ser mais ludica e abstrada

# RM_MOUNTAIN
    cor dos bloom vignettes da mountain:                    0D0C19
    old foreground_bloom_light color:                       red FF1952
    cores das particulas de linhas horizontais na mountain: 19332D / 1E1D39 respectivamente
    
    - foreground tiles
    - backgroud tiles
    - foreground props
    - background props

# RM_PLAYGROUND
    - levels da capsula
    
    - foreground tiles
    - backgroud tiles
    - foreground props
    - background props
    - foreground / background particles

# RM_END
    - plataformas de apenas um bloco; aparecem conforme o player se aproxima

# RM_WALL_DASH_COLLIDERS_BONUS
    - levels

# RM_DESTROY_BLOCK_BONUS
    - levels

# RM_LASER_BEAM_BONUS
    - levels

# RM_BONUS_1

# RM_BONUS_2

# DESTROY BLOCK
    - nao destruir o destroy_block se o player dar dash apenas pra cima (ou pra baixo?) e colidir nas laterais.
        - mesma coisa pra se o player da dash apenas pros lados e colide em cima ou em baixo.
    - implementar highlight do player quando dentro de um destroy block.

# IDEIAS
    - cada collectable ser diferente em aparencia.
    
    - variacao do destroy_block que possui varias "camadas", o player precisa dar dash contra elas 
    algumas vezes pra conseguir abrir caminho, isso pode ser util em ideias de levels em que o player 
    precisar ficar dando dash no ar, ate que consiga passar, e ai isso pode envolver até outros objetos, 
    como o moving_death_collider.





outras ideias sobre o blockits:
* Aprender que nao se deve gastar o dash quando nao precisa, em varios momentos durante o jogo, existem algumas pegadinhas nos levels, em que pode ate parecer que esta tudo bem gastar um dash atoa, onde se poderia somente pular de uma parede a outra, mas logo em seguida o player se da conta de que precisa ter um dash pra prosseguir, e eh obrigado a se matar pra regressar ao ultimo checkpoint. Esse tipo de "piada" ou "pegadinha" é interessante de se estar presente no jogo de vez em quando, mas nao muito, sem exagero.

* Nao acho tao interessante colocar uma enfaze muito grande, ou mesmo desenhar os levels em geral de forma que seja possivel prosseguir de mais de um jeito. Isso ate pode ser interessante, mas em casos muito pontuais, ou que na maioria das vezes nao tenha tanta importancia.

* A geometria dos levels deve ser mais sóbria, mais simples, mais minimalista, mas sem perder o charme. Nao deve ficar na frente e atrapalhar o player quando for preciso ler e enteder um level pelas primeiras vezes, mas tambem nao deve ser chata e monotona, cansativa e entediante apos passar algumas horas em uma area, ou ate mesmo em um unico level. Sem formas muito complexas e detalhes em locais aleatorios, que desviam a atencao do player pro que realmente eh importante no level: o level... so objetos de gameplay, e o caminho principal.

* Existem algumas outras pegadinhas no jogo, como caminhos que levam a lugar nenhum, e passagens "bloqueadas" que só podem ser acessadas vindo de outra direção. Essas pegadinhas nao podem custar muito caro pro player, senao se torna mais irritante e cansativo do que engracado.

* Nao existem objetos dentro de outros objetos, nem objetos dentro das paredes (geometria dos levels). Salvo algumas exceções em que existem objetos dash_bonus_item dentro de objetos destroy_block.

* Nao existem "secrets" convencionais, como na maioria dos jogos de plataforma, em que o player colide ou da dash contra uma parede, e ela vai sumindo lentamente, até que uma passagem ou sala secreta eh revelada, geralmente contento um item considerado valioso. O que existe sao salas ou passagens "secretas", porem elas estao geralmente localizadas nos cantos dos levels/areas, e podem passar despercebidos pelo player conforme ele prossegue pelo caminho principal, ou as vezes o mesmo tem de tomar um ato de curiosidade, a ate um pouco de criatividade, afim de descobrir se existe algo escondido nas extremidades do mapa. Essas areas podem se conectar de volta com o caminho principal em certos casos.

* Existem certas "sacadas" que o player precisa entender em determinados levels e areas do jogo. Nesses casos, o player precisa realizar uma serie de movimentos especificos, em uma ordem especifica, pra poder prosseguir. E isso geralmente envolve ter um entendimento melhor sobre as limitações e o que você pode fazer e não fazer com o player, assim como sobre os objetos de gameplay e o que eh possivel fazer com eles. Isso eh um ponto muito importante do jogo, e que tem que estar presente de forma constante durante a gameplay.

* Esse eh um jogo sobre prestar atencao no que os objetos fazem, e prestar atencao no mapa em si, nos cantos, nas bordas e extremidades. Nao existe mapa pra se guiar entre e dentro das areas, entao o jogador precisa prestar ainda mais atencao aonde esta indo, e por onde passou.

* As transicoes entre rooms, entre camera_masks, entre menus, tudo precisa ser rapido, responsivo, fluido e bem animado. O player nao pode perder tempo com esse tipo de coisa, tem que ser facil e rapido de navegar pelo jogo, e ir e voltar nas areas de forma agil.

* O jogo deve comecar instantaneamente, sem menus, sem telas pra escolher um save slot, sem splashscreens, screentitles e logos sobre software ou o nome de estudio aparecendo antes do jogo inicias. Assim que a pessoa abrir o executavel, ou clicar em Jogar na steam, o jogo deve iniciar já com o player na room, pronto pra jogar.

* Sem configurações complexas de graficos; sem configuracoes complexas de input e keybinds; sem hud durante a gameplay; sem NPCs, sem dialogo; sem texto durante a gameplay (somente no menu de pause); sem estoria ou lore; sem cutscenes. O jogo inteiro eh continuo e nunca eh interrompido por menus ou cutscenes, nem por dialogos com NPCs ou coisas do tipo, afim de contar uma estoria.

- estabelecer um padrão das areas, o tamanho delas, que voce vai do ponto a ate o b, etc
- e ai achar coisas interessantes que de pra fazer pra quebrar esse padrao, gerando surpresa pro jogador
- tipo uma area que eh menor, com um proposito diferente, uma aparencia totalmente diferente, com paredes sem colisao, objetos juntos nessa area que nunca estiveram juntos em outras areas
- uma quebra de padrões que pode tornar o jogo mais interessante. Isso talvez possa ser feito atraves das bonus areas, mas eu queria mesmo eh fazer uma area totalmente separada, bem distinta das outras areas.

- como em Braid, existem as entradas pras areas, todas sao acessiveis a qualquer momento, mas existe uma entrada que esta meio que bloqueada, e precisa que o jogador libere todas as outras areas pra poder acessar, e essa entrada leva pro final do jogo (a ultima hora). Tentar achar uma forma criativa de fazer isso, como em Braid com as escadas, e tentar ate fazer com que a area nao seja bloqueada necessariamente, mas ainda assim nao seja acessivel de alguma forma, talvez algo envolvendo a area que voce estivera ate agora (o nexus)... 

* o jogo gasta um tempo ensinando o jogador como certos objetos funcionam, e depois apresenta levels que envolvem repetir o conhecimento que voce jah adiquiriu soh que de uma forma um pouco mais dificil. Pra gerar surpresa e novidade no jogo existem as variacoes dos objetos de gameplay, que quebram certos padroes e introduzem novas informacoes sobre o universo, que acaba se tornando conhecimento pro player.