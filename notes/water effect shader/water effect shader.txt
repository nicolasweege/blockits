	---=== GLOBAL VARIABLES ===---

// @water effect
global.u_pixelh_wave  = shader_get_uniform(sh_water, "pixelh");
global.u_pixelw_wave  = shader_get_uniform(sh_water, "pixelw");
global.u_spring_count = shader_get_uniform(sh_water, "spring_count");
global.u_springs      = shader_get_uniform(sh_water, "springs");
global.u_time         = shader_get_uniform(sh_water, "time");

	---=== VSH ===--

//
// Simple passthrough vertex shader
//
attribute vec3 in_Position;                  // (x,y,z)
//attribute vec3 in_Normal;                  // (x,y,z)     unused in this shader.
attribute vec4 in_Colour;                    // (r,g,b,a)
attribute vec2 in_TextureCoord;              // (u,v)

varying vec2 v_vTexcoord;
varying vec4 v_vColour;

void main()
{
	vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);
	gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;
    
	v_vColour = in_Colour;
	v_vTexcoord = in_TextureCoord;
}

	---=== FSH ===---

varying vec2 v_vTexcoord;
varying vec4 v_vColour;

uniform float pixelh;
uniform float pixelw;
uniform float springs[1000];
uniform float time;
uniform float fizzle;
uniform float spring_count;

void main()
{
	vec2 p = v_vTexcoord;
	float py = 1.0 - p.y;
	float pixel_is_in = (p.x / pixelw);
	int chunk = int(floor(p.x * spring_count));
	int next_chunk = int(min(floor(p.x * spring_count) + 1.0, 99.0));
	float chunk_percent = (p.x * spring_count) - float(p.x * spring_count);
	p.y = p.y + ((sin((pixel_is_in * 0.1) + time) * (1.5 * pixelh)) * py);
	p.y = p.y + ((sin((pixel_is_in * 0.15) - time * 1.2) * (1.5 * pixelh)) * py);
	p.y = p.y + (mix(springs[chunk] * pixelh, springs[next_chunk] * pixelh, chunk_percent) * py);
	p.y = max(p.y, 0.0);
	gl_FragColor = v_vColour * texture2D(gm_BaseTexture, p);
}